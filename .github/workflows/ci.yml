name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Slither analysis (if contracts exist)
        uses: crytic/slither-action@v0.3.0
        id: slither
        with:
          target: "contracts/"
          slither-config: slither.config.json
          fail-on: none
        continue-on-error: true

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    environment: testnet

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Deploy to testnet
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.TESTNET_RPC_URL }}
        run: |
          echo "Deploying to testnet..."
          echo "Checking environment variables..."
          if [ -z "$PRIVATE_KEY" ]; then
            echo "❌ TESTNET_PRIVATE_KEY secret is not set"
            exit 1
          fi
          if [ -z "$RPC_URL" ]; then
            echo "❌ TESTNET_RPC_URL secret is not set"
            exit 1
          fi
          echo "✅ Environment variables are set"
          npx hardhat run scripts/deploy.ts --network dev

      - name: Verify deployment
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.TESTNET_RPC_URL }}
          COUNTER_ADDR: ${{ env.DEPLOYED_CONTRACT_ADDRESS }}
        run: |
          echo "Verifying deployment..."
          # Add verification steps here

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy-testnet
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Get version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          release_name: Release v${{ steps.package-version.outputs.version }}
          body: |
            ## Changes in this Release

            ### Features
            - PrivateCounter smart contract implementation
            - Comprehensive test suite
            - Deployment and interaction scripts
            - TypeScript support with Hardhat

            ### Technical Details
            - Solidity version: 0.8.24
            - Hardhat framework integration
            - Automated CI/CD pipeline
            - Security auditing with Slither

            ### Usage
            ```bash
            npm install
            npx hardhat compile
            npx hardhat test
            npx hardhat run scripts/deploy.ts --network localhost
            ```

            For more details, see the [README](README.md).
          draft: false
          prerelease: false
